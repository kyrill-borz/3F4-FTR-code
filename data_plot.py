import numpy as np
import matplotlib.pyplot as plt
from scipy import special

def Q(x):
  return 0.5 - 0.5*special.erf(x/np.sqrt(2))
e_saved=np.array([[-2.00000000e+00,  3.36666667e-01,  3.30666667e-02,  5.10000000e-01, 5.21333333e-02,  3.40000000e-01,  3.17333333e-02],
           [-1.50000000e+00,  2.20524017e-01,  2.08733624e-02,  3.38427948e-01, 3.06113537e-02,  2.24890830e-01,  2.10917031e-02],
           [-1.00000000e+00,  1.62903226e-01,  1.34516129e-02,  2.91935484e-01,  2.33870968e-02,  1.66129032e-01 , 1.30967742e-02],
           [ 0.00000000e+00,  3.20000000e-02,  1.99000000e-03,  1.12500000e-01, 6.30000000e-03,  3.25000000e-02,  2.02000000e-03],
           [ 5.00000000e-01,  1.55000000e-02,  1.03000000e-03,  7.10000000e-02, 3.73000000e-03,  1.55000000e-02,  9.60000000e-04],
           [ 1.00000000e+00,  6.50000000e-03,  2.50000000e-04,  4.10000000e-02, 1.60000000e-03,  6.50000000e-03,  2.50000000e-04],
           [ 1.50000000e+00,  2.00000000e-03,  1.20000000e-04,  3.00000000e-02, 1.20000000e-03,  2.00000000e-03,  1.20000000e-04]])

turbo_data = [[-2, 0.5047846889952153, 0.031626794258373205, 0.489010989010989, 0.021043956043956043, 0.45363408521303256, 0.016741854636591478, 0.4229828850855746, 0.014034229828850857], [-1.5, 0.36335403726708076, 0.019099378881987577, 0.3887884267631103, 0.01511754068716094, 0.3572593800978793, 0.012920065252854813, 0.329073482428115, 0.010095846645367413], [-1, 0.2995121951219512, 0.013326829268292683, 0.27076923076923076, 0.009353846153846154, 0.2644098810612992, 0.008453796889295517, 0.26371308016877637, 0.007974683544303798], [0, 0.142, 0.00532, 0.137, 0.00361, 0.1295, 0.00365, 0.1335, 0.00382], [0.5, 0.091, 0.00303, 0.082, 0.00221, 0.086, 0.00264, 0.087, 0.00213], [1, 0.0555, 0.00145, 0.055, 0.00126, 0.058, 0.00164, 0.053, 0.00127], [1.5, 0.041, 0.00104, 0.035, 0.00078, 0.0385, 0.00108, 0.032, 0.00077]]
ebn0 = e_saved[:,0]
sigma = np.power(10,-ebn0/20)/np.sqrt(2)
uncoded_rate = [Q(1/x) for x in sigma]
turbo_data_new = []
e_saved_data = np.array([[-2.00000000e+00,  3.36666667e-01,  5.10000000e-01],
           [-1.50000000e+00,  2.20524017e-01,    3.38427948e-01],
           [-1.00000000e+00,  1.62903226e-01,    2.91935484e-01],
           [ 0.00000000e+00,  3.20000000e-02,    1.12500000e-01],
           [ 5.00000000e-01,  1.55000000e-02,    7.10000000e-02],
           [ 1.00000000e+00,  6.50000000e-03,    4.10000000e-02],
           [ 1.50000000e+00,  2.00000000e-03,    3.00000000e-02]])

for element in turbo_data:
  new_data = [element[0]] + (element[1:][::2])
  turbo_data_new.append(new_data)

print(e_saved_data)
bit_rate_turbo_data = [[-2, 0.5047846889952153, 0.489010989010989, 0.45363408521303256, 0.4229828850855746], [-1.5, 0.36335403726708076, 0.3887884267631103, 0.3572593800978793, 0.329073482428115], [-1, 0.2995121951219512, 0.27076923076923076, 
0.2644098810612992, 0.26371308016877637], [0, 0.142, 0.137, 0.1295, 0.08335], [0.5, 0.091, 0.082, 0.076, 0.0087], [1, 0.0555, 0.035, 0.018, 0.0023], [1.5, 0.041, 0.0085, 0.000885, 0.00017]]
plt.semilogy(ebn0,uncoded_rate)
#plt.semilogy(ebn0,[x[1:] for x in e_saved_data]) # other error rates
plt.semilogy(ebn0,[x[1:] for x in bit_rate_turbo_data])
plt.grid()
plt.xlabel("Eb/N0")
plt.ylabel("Error rates")
#plt.legend(["Uncoded bit error rate", "Viterbi bit error rate", "Log BCJR bit error rate"])
plt.legend(["Uncoded bit error rate", "1 Iteration", "2 Iterations","3 Iterations","4 Iterations"])
plt.plot()
plt.show()
